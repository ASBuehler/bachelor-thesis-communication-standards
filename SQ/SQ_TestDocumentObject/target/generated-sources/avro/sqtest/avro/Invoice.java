/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package sqtest.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Invoice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1052941580231824559L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Invoice\",\"namespace\":\"sqtest.avro\",\"fields\":[{\"name\":\"invoiceNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"issueDate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"dueDate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"billingAddress\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"postalCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"lineItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InvoiceLineItem\",\"fields\":[{\"name\":\"productId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"unitPrice\",\"type\":[\"null\",\"string\"],\"doc\":\"BigDecimal als String\"},{\"name\":\"lineTotal\",\"type\":[\"null\",\"string\"],\"doc\":\"BigDecimal als String\"}]}}},{\"name\":\"subtotal\",\"type\":[\"null\",\"string\"],\"doc\":\"BigDecimal als String\"},{\"name\":\"tax\",\"type\":[\"null\",\"string\"],\"doc\":\"BigDecimal als String\"},{\"name\":\"total\",\"type\":[\"null\",\"string\"],\"doc\":\"BigDecimal als String\"},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"PaymentStatus\",\"symbols\":[\"DRAFT\",\"SENT\",\"PAID\",\"OVERDUE\",\"VOID\"]}],\"default\":null},{\"name\":\"notes\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"companyLogo\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<Invoice> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Invoice> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Invoice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Invoice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Invoice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Invoice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Invoice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Invoice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Invoice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence invoiceNumber;
  private java.time.LocalDate issueDate;
  private java.time.LocalDate dueDate;
  private sqtest.avro.Address billingAddress;
  private java.util.List<sqtest.avro.InvoiceLineItem> lineItems;
  /** BigDecimal als String */
  private java.lang.CharSequence subtotal;
  /** BigDecimal als String */
  private java.lang.CharSequence tax;
  /** BigDecimal als String */
  private java.lang.CharSequence total;
  private sqtest.avro.PaymentStatus status;
  private java.lang.CharSequence notes;
  private java.nio.ByteBuffer companyLogo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Invoice() {}

  /**
   * All-args constructor.
   * @param invoiceNumber The new value for invoiceNumber
   * @param issueDate The new value for issueDate
   * @param dueDate The new value for dueDate
   * @param billingAddress The new value for billingAddress
   * @param lineItems The new value for lineItems
   * @param subtotal BigDecimal als String
   * @param tax BigDecimal als String
   * @param total BigDecimal als String
   * @param status The new value for status
   * @param notes The new value for notes
   * @param companyLogo The new value for companyLogo
   */
  public Invoice(java.lang.CharSequence invoiceNumber, java.time.LocalDate issueDate, java.time.LocalDate dueDate, sqtest.avro.Address billingAddress, java.util.List<sqtest.avro.InvoiceLineItem> lineItems, java.lang.CharSequence subtotal, java.lang.CharSequence tax, java.lang.CharSequence total, sqtest.avro.PaymentStatus status, java.lang.CharSequence notes, java.nio.ByteBuffer companyLogo) {
    this.invoiceNumber = invoiceNumber;
    this.issueDate = issueDate;
    this.dueDate = dueDate;
    this.billingAddress = billingAddress;
    this.lineItems = lineItems;
    this.subtotal = subtotal;
    this.tax = tax;
    this.total = total;
    this.status = status;
    this.notes = notes;
    this.companyLogo = companyLogo;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return invoiceNumber;
    case 1: return issueDate;
    case 2: return dueDate;
    case 3: return billingAddress;
    case 4: return lineItems;
    case 5: return subtotal;
    case 6: return tax;
    case 7: return total;
    case 8: return status;
    case 9: return notes;
    case 10: return companyLogo;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: invoiceNumber = (java.lang.CharSequence)value$; break;
    case 1: issueDate = (java.time.LocalDate)value$; break;
    case 2: dueDate = (java.time.LocalDate)value$; break;
    case 3: billingAddress = (sqtest.avro.Address)value$; break;
    case 4: lineItems = (java.util.List<sqtest.avro.InvoiceLineItem>)value$; break;
    case 5: subtotal = (java.lang.CharSequence)value$; break;
    case 6: tax = (java.lang.CharSequence)value$; break;
    case 7: total = (java.lang.CharSequence)value$; break;
    case 8: status = (sqtest.avro.PaymentStatus)value$; break;
    case 9: notes = (java.lang.CharSequence)value$; break;
    case 10: companyLogo = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'invoiceNumber' field.
   * @return The value of the 'invoiceNumber' field.
   */
  public java.lang.CharSequence getInvoiceNumber() {
    return invoiceNumber;
  }


  /**
   * Sets the value of the 'invoiceNumber' field.
   * @param value the value to set.
   */
  public void setInvoiceNumber(java.lang.CharSequence value) {
    this.invoiceNumber = value;
  }

  /**
   * Gets the value of the 'issueDate' field.
   * @return The value of the 'issueDate' field.
   */
  public java.time.LocalDate getIssueDate() {
    return issueDate;
  }


  /**
   * Sets the value of the 'issueDate' field.
   * @param value the value to set.
   */
  public void setIssueDate(java.time.LocalDate value) {
    this.issueDate = value;
  }

  /**
   * Gets the value of the 'dueDate' field.
   * @return The value of the 'dueDate' field.
   */
  public java.time.LocalDate getDueDate() {
    return dueDate;
  }


  /**
   * Sets the value of the 'dueDate' field.
   * @param value the value to set.
   */
  public void setDueDate(java.time.LocalDate value) {
    this.dueDate = value;
  }

  /**
   * Gets the value of the 'billingAddress' field.
   * @return The value of the 'billingAddress' field.
   */
  public sqtest.avro.Address getBillingAddress() {
    return billingAddress;
  }


  /**
   * Sets the value of the 'billingAddress' field.
   * @param value the value to set.
   */
  public void setBillingAddress(sqtest.avro.Address value) {
    this.billingAddress = value;
  }

  /**
   * Gets the value of the 'lineItems' field.
   * @return The value of the 'lineItems' field.
   */
  public java.util.List<sqtest.avro.InvoiceLineItem> getLineItems() {
    return lineItems;
  }


  /**
   * Sets the value of the 'lineItems' field.
   * @param value the value to set.
   */
  public void setLineItems(java.util.List<sqtest.avro.InvoiceLineItem> value) {
    this.lineItems = value;
  }

  /**
   * Gets the value of the 'subtotal' field.
   * @return BigDecimal als String
   */
  public java.lang.CharSequence getSubtotal() {
    return subtotal;
  }


  /**
   * Sets the value of the 'subtotal' field.
   * BigDecimal als String
   * @param value the value to set.
   */
  public void setSubtotal(java.lang.CharSequence value) {
    this.subtotal = value;
  }

  /**
   * Gets the value of the 'tax' field.
   * @return BigDecimal als String
   */
  public java.lang.CharSequence getTax() {
    return tax;
  }


  /**
   * Sets the value of the 'tax' field.
   * BigDecimal als String
   * @param value the value to set.
   */
  public void setTax(java.lang.CharSequence value) {
    this.tax = value;
  }

  /**
   * Gets the value of the 'total' field.
   * @return BigDecimal als String
   */
  public java.lang.CharSequence getTotal() {
    return total;
  }


  /**
   * Sets the value of the 'total' field.
   * BigDecimal als String
   * @param value the value to set.
   */
  public void setTotal(java.lang.CharSequence value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public sqtest.avro.PaymentStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(sqtest.avro.PaymentStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'notes' field.
   * @return The value of the 'notes' field.
   */
  public java.lang.CharSequence getNotes() {
    return notes;
  }


  /**
   * Sets the value of the 'notes' field.
   * @param value the value to set.
   */
  public void setNotes(java.lang.CharSequence value) {
    this.notes = value;
  }

  /**
   * Gets the value of the 'companyLogo' field.
   * @return The value of the 'companyLogo' field.
   */
  public java.nio.ByteBuffer getCompanyLogo() {
    return companyLogo;
  }


  /**
   * Sets the value of the 'companyLogo' field.
   * @param value the value to set.
   */
  public void setCompanyLogo(java.nio.ByteBuffer value) {
    this.companyLogo = value;
  }

  /**
   * Creates a new Invoice RecordBuilder.
   * @return A new Invoice RecordBuilder
   */
  public static sqtest.avro.Invoice.Builder newBuilder() {
    return new sqtest.avro.Invoice.Builder();
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Invoice RecordBuilder
   */
  public static sqtest.avro.Invoice.Builder newBuilder(sqtest.avro.Invoice.Builder other) {
    if (other == null) {
      return new sqtest.avro.Invoice.Builder();
    } else {
      return new sqtest.avro.Invoice.Builder(other);
    }
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Invoice instance.
   * @param other The existing instance to copy.
   * @return A new Invoice RecordBuilder
   */
  public static sqtest.avro.Invoice.Builder newBuilder(sqtest.avro.Invoice other) {
    if (other == null) {
      return new sqtest.avro.Invoice.Builder();
    } else {
      return new sqtest.avro.Invoice.Builder(other);
    }
  }

  /**
   * RecordBuilder for Invoice instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Invoice>
    implements org.apache.avro.data.RecordBuilder<Invoice> {

    private java.lang.CharSequence invoiceNumber;
    private java.time.LocalDate issueDate;
    private java.time.LocalDate dueDate;
    private sqtest.avro.Address billingAddress;
    private sqtest.avro.Address.Builder billingAddressBuilder;
    private java.util.List<sqtest.avro.InvoiceLineItem> lineItems;
    /** BigDecimal als String */
    private java.lang.CharSequence subtotal;
    /** BigDecimal als String */
    private java.lang.CharSequence tax;
    /** BigDecimal als String */
    private java.lang.CharSequence total;
    private sqtest.avro.PaymentStatus status;
    private java.lang.CharSequence notes;
    private java.nio.ByteBuffer companyLogo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(sqtest.avro.Invoice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.invoiceNumber)) {
        this.invoiceNumber = data().deepCopy(fields()[0].schema(), other.invoiceNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.issueDate)) {
        this.issueDate = data().deepCopy(fields()[1].schema(), other.issueDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[2].schema(), other.dueDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.billingAddress)) {
        this.billingAddress = data().deepCopy(fields()[3].schema(), other.billingAddress);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasBillingAddressBuilder()) {
        this.billingAddressBuilder = sqtest.avro.Address.newBuilder(other.getBillingAddressBuilder());
      }
      if (isValidValue(fields()[4], other.lineItems)) {
        this.lineItems = data().deepCopy(fields()[4].schema(), other.lineItems);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.subtotal)) {
        this.subtotal = data().deepCopy(fields()[5].schema(), other.subtotal);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.tax)) {
        this.tax = data().deepCopy(fields()[6].schema(), other.tax);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.total)) {
        this.total = data().deepCopy(fields()[7].schema(), other.total);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.notes)) {
        this.notes = data().deepCopy(fields()[9].schema(), other.notes);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.companyLogo)) {
        this.companyLogo = data().deepCopy(fields()[10].schema(), other.companyLogo);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing Invoice instance
     * @param other The existing instance to copy.
     */
    private Builder(sqtest.avro.Invoice other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.invoiceNumber)) {
        this.invoiceNumber = data().deepCopy(fields()[0].schema(), other.invoiceNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issueDate)) {
        this.issueDate = data().deepCopy(fields()[1].schema(), other.issueDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[2].schema(), other.dueDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.billingAddress)) {
        this.billingAddress = data().deepCopy(fields()[3].schema(), other.billingAddress);
        fieldSetFlags()[3] = true;
      }
      this.billingAddressBuilder = null;
      if (isValidValue(fields()[4], other.lineItems)) {
        this.lineItems = data().deepCopy(fields()[4].schema(), other.lineItems);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subtotal)) {
        this.subtotal = data().deepCopy(fields()[5].schema(), other.subtotal);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tax)) {
        this.tax = data().deepCopy(fields()[6].schema(), other.tax);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.total)) {
        this.total = data().deepCopy(fields()[7].schema(), other.total);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.notes)) {
        this.notes = data().deepCopy(fields()[9].schema(), other.notes);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.companyLogo)) {
        this.companyLogo = data().deepCopy(fields()[10].schema(), other.companyLogo);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'invoiceNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getInvoiceNumber() {
      return invoiceNumber;
    }


    /**
      * Sets the value of the 'invoiceNumber' field.
      * @param value The value of 'invoiceNumber'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setInvoiceNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.invoiceNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'invoiceNumber' field has been set.
      * @return True if the 'invoiceNumber' field has been set, false otherwise.
      */
    public boolean hasInvoiceNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'invoiceNumber' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearInvoiceNumber() {
      invoiceNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'issueDate' field.
      * @return The value.
      */
    public java.time.LocalDate getIssueDate() {
      return issueDate;
    }


    /**
      * Sets the value of the 'issueDate' field.
      * @param value The value of 'issueDate'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setIssueDate(java.time.LocalDate value) {
      validate(fields()[1], value);
      this.issueDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'issueDate' field has been set.
      * @return True if the 'issueDate' field has been set, false otherwise.
      */
    public boolean hasIssueDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'issueDate' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearIssueDate() {
      issueDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dueDate' field.
      * @return The value.
      */
    public java.time.LocalDate getDueDate() {
      return dueDate;
    }


    /**
      * Sets the value of the 'dueDate' field.
      * @param value The value of 'dueDate'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setDueDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.dueDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dueDate' field has been set.
      * @return True if the 'dueDate' field has been set, false otherwise.
      */
    public boolean hasDueDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dueDate' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearDueDate() {
      dueDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'billingAddress' field.
      * @return The value.
      */
    public sqtest.avro.Address getBillingAddress() {
      return billingAddress;
    }


    /**
      * Sets the value of the 'billingAddress' field.
      * @param value The value of 'billingAddress'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setBillingAddress(sqtest.avro.Address value) {
      validate(fields()[3], value);
      this.billingAddressBuilder = null;
      this.billingAddress = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'billingAddress' field has been set.
      * @return True if the 'billingAddress' field has been set, false otherwise.
      */
    public boolean hasBillingAddress() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'billingAddress' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public sqtest.avro.Address.Builder getBillingAddressBuilder() {
      if (billingAddressBuilder == null) {
        if (hasBillingAddress()) {
          setBillingAddressBuilder(sqtest.avro.Address.newBuilder(billingAddress));
        } else {
          setBillingAddressBuilder(sqtest.avro.Address.newBuilder());
        }
      }
      return billingAddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'billingAddress' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public sqtest.avro.Invoice.Builder setBillingAddressBuilder(sqtest.avro.Address.Builder value) {
      clearBillingAddress();
      billingAddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'billingAddress' field has an active Builder instance
     * @return True if the 'billingAddress' field has an active Builder instance
     */
    public boolean hasBillingAddressBuilder() {
      return billingAddressBuilder != null;
    }

    /**
      * Clears the value of the 'billingAddress' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearBillingAddress() {
      billingAddress = null;
      billingAddressBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineItems' field.
      * @return The value.
      */
    public java.util.List<sqtest.avro.InvoiceLineItem> getLineItems() {
      return lineItems;
    }


    /**
      * Sets the value of the 'lineItems' field.
      * @param value The value of 'lineItems'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setLineItems(java.util.List<sqtest.avro.InvoiceLineItem> value) {
      validate(fields()[4], value);
      this.lineItems = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lineItems' field has been set.
      * @return True if the 'lineItems' field has been set, false otherwise.
      */
    public boolean hasLineItems() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lineItems' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearLineItems() {
      lineItems = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'subtotal' field.
      * BigDecimal als String
      * @return The value.
      */
    public java.lang.CharSequence getSubtotal() {
      return subtotal;
    }


    /**
      * Sets the value of the 'subtotal' field.
      * BigDecimal als String
      * @param value The value of 'subtotal'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setSubtotal(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.subtotal = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'subtotal' field has been set.
      * BigDecimal als String
      * @return True if the 'subtotal' field has been set, false otherwise.
      */
    public boolean hasSubtotal() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'subtotal' field.
      * BigDecimal als String
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearSubtotal() {
      subtotal = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tax' field.
      * BigDecimal als String
      * @return The value.
      */
    public java.lang.CharSequence getTax() {
      return tax;
    }


    /**
      * Sets the value of the 'tax' field.
      * BigDecimal als String
      * @param value The value of 'tax'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setTax(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.tax = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tax' field has been set.
      * BigDecimal als String
      * @return True if the 'tax' field has been set, false otherwise.
      */
    public boolean hasTax() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tax' field.
      * BigDecimal als String
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearTax() {
      tax = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'total' field.
      * BigDecimal als String
      * @return The value.
      */
    public java.lang.CharSequence getTotal() {
      return total;
    }


    /**
      * Sets the value of the 'total' field.
      * BigDecimal als String
      * @param value The value of 'total'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setTotal(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.total = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * BigDecimal als String
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'total' field.
      * BigDecimal als String
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearTotal() {
      total = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public sqtest.avro.PaymentStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setStatus(sqtest.avro.PaymentStatus value) {
      validate(fields()[8], value);
      this.status = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearStatus() {
      status = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'notes' field.
      * @return The value.
      */
    public java.lang.CharSequence getNotes() {
      return notes;
    }


    /**
      * Sets the value of the 'notes' field.
      * @param value The value of 'notes'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setNotes(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.notes = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'notes' field has been set.
      * @return True if the 'notes' field has been set, false otherwise.
      */
    public boolean hasNotes() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'notes' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearNotes() {
      notes = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'companyLogo' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getCompanyLogo() {
      return companyLogo;
    }


    /**
      * Sets the value of the 'companyLogo' field.
      * @param value The value of 'companyLogo'.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder setCompanyLogo(java.nio.ByteBuffer value) {
      validate(fields()[10], value);
      this.companyLogo = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'companyLogo' field has been set.
      * @return True if the 'companyLogo' field has been set, false otherwise.
      */
    public boolean hasCompanyLogo() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'companyLogo' field.
      * @return This builder.
      */
    public sqtest.avro.Invoice.Builder clearCompanyLogo() {
      companyLogo = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Invoice build() {
      try {
        Invoice record = new Invoice();
        record.invoiceNumber = fieldSetFlags()[0] ? this.invoiceNumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.issueDate = fieldSetFlags()[1] ? this.issueDate : (java.time.LocalDate) defaultValue(fields()[1]);
        record.dueDate = fieldSetFlags()[2] ? this.dueDate : (java.time.LocalDate) defaultValue(fields()[2]);
        if (billingAddressBuilder != null) {
          try {
            record.billingAddress = this.billingAddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("billingAddress"));
            throw e;
          }
        } else {
          record.billingAddress = fieldSetFlags()[3] ? this.billingAddress : (sqtest.avro.Address) defaultValue(fields()[3]);
        }
        record.lineItems = fieldSetFlags()[4] ? this.lineItems : (java.util.List<sqtest.avro.InvoiceLineItem>) defaultValue(fields()[4]);
        record.subtotal = fieldSetFlags()[5] ? this.subtotal : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.tax = fieldSetFlags()[6] ? this.tax : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.total = fieldSetFlags()[7] ? this.total : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.status = fieldSetFlags()[8] ? this.status : (sqtest.avro.PaymentStatus) defaultValue(fields()[8]);
        record.notes = fieldSetFlags()[9] ? this.notes : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.companyLogo = fieldSetFlags()[10] ? this.companyLogo : (java.nio.ByteBuffer) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Invoice>
    WRITER$ = (org.apache.avro.io.DatumWriter<Invoice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Invoice>
    READER$ = (org.apache.avro.io.DatumReader<Invoice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










