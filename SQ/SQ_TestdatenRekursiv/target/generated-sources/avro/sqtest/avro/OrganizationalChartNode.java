/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package sqtest.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrganizationalChartNode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1868789514770464339L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrganizationalChartNode\",\"namespace\":\"sqtest.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"joinedDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"subordinates\",\"type\":{\"type\":\"array\",\"items\":\"OrganizationalChartNode\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<OrganizationalChartNode> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrganizationalChartNode> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrganizationalChartNode> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrganizationalChartNode> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrganizationalChartNode> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrganizationalChartNode to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrganizationalChartNode from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrganizationalChartNode instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrganizationalChartNode fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.CharSequence name;
  private java.lang.CharSequence role;
  private java.time.LocalDate joinedDate;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata;
  private java.util.List<sqtest.avro.OrganizationalChartNode> subordinates;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrganizationalChartNode() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param role The new value for role
   * @param joinedDate The new value for joinedDate
   * @param metadata The new value for metadata
   * @param subordinates The new value for subordinates
   */
  public OrganizationalChartNode(java.lang.Long id, java.lang.CharSequence name, java.lang.CharSequence role, java.time.LocalDate joinedDate, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata, java.util.List<sqtest.avro.OrganizationalChartNode> subordinates) {
    this.id = id;
    this.name = name;
    this.role = role;
    this.joinedDate = joinedDate;
    this.metadata = metadata;
    this.subordinates = subordinates;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return role;
    case 3: return joinedDate;
    case 4: return metadata;
    case 5: return subordinates;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: role = (java.lang.CharSequence)value$; break;
    case 3: joinedDate = (java.time.LocalDate)value$; break;
    case 4: metadata = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 5: subordinates = (java.util.List<sqtest.avro.OrganizationalChartNode>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public java.lang.CharSequence getRole() {
    return role;
  }


  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(java.lang.CharSequence value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'joinedDate' field.
   * @return The value of the 'joinedDate' field.
   */
  public java.time.LocalDate getJoinedDate() {
    return joinedDate;
  }


  /**
   * Sets the value of the 'joinedDate' field.
   * @param value the value to set.
   */
  public void setJoinedDate(java.time.LocalDate value) {
    this.joinedDate = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return The value of the 'metadata' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * @param value the value to set.
   */
  public void setMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'subordinates' field.
   * @return The value of the 'subordinates' field.
   */
  public java.util.List<sqtest.avro.OrganizationalChartNode> getSubordinates() {
    return subordinates;
  }


  /**
   * Sets the value of the 'subordinates' field.
   * @param value the value to set.
   */
  public void setSubordinates(java.util.List<sqtest.avro.OrganizationalChartNode> value) {
    this.subordinates = value;
  }

  /**
   * Creates a new OrganizationalChartNode RecordBuilder.
   * @return A new OrganizationalChartNode RecordBuilder
   */
  public static sqtest.avro.OrganizationalChartNode.Builder newBuilder() {
    return new sqtest.avro.OrganizationalChartNode.Builder();
  }

  /**
   * Creates a new OrganizationalChartNode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrganizationalChartNode RecordBuilder
   */
  public static sqtest.avro.OrganizationalChartNode.Builder newBuilder(sqtest.avro.OrganizationalChartNode.Builder other) {
    if (other == null) {
      return new sqtest.avro.OrganizationalChartNode.Builder();
    } else {
      return new sqtest.avro.OrganizationalChartNode.Builder(other);
    }
  }

  /**
   * Creates a new OrganizationalChartNode RecordBuilder by copying an existing OrganizationalChartNode instance.
   * @param other The existing instance to copy.
   * @return A new OrganizationalChartNode RecordBuilder
   */
  public static sqtest.avro.OrganizationalChartNode.Builder newBuilder(sqtest.avro.OrganizationalChartNode other) {
    if (other == null) {
      return new sqtest.avro.OrganizationalChartNode.Builder();
    } else {
      return new sqtest.avro.OrganizationalChartNode.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrganizationalChartNode instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrganizationalChartNode>
    implements org.apache.avro.data.RecordBuilder<OrganizationalChartNode> {

    private long id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence role;
    private java.time.LocalDate joinedDate;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata;
    private java.util.List<sqtest.avro.OrganizationalChartNode> subordinates;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(sqtest.avro.OrganizationalChartNode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.joinedDate)) {
        this.joinedDate = data().deepCopy(fields()[3].schema(), other.joinedDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.metadata)) {
        this.metadata = data().deepCopy(fields()[4].schema(), other.metadata);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.subordinates)) {
        this.subordinates = data().deepCopy(fields()[5].schema(), other.subordinates);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing OrganizationalChartNode instance
     * @param other The existing instance to copy.
     */
    private Builder(sqtest.avro.OrganizationalChartNode other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.joinedDate)) {
        this.joinedDate = data().deepCopy(fields()[3].schema(), other.joinedDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.metadata)) {
        this.metadata = data().deepCopy(fields()[4].schema(), other.metadata);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subordinates)) {
        this.subordinates = data().deepCopy(fields()[5].schema(), other.subordinates);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public java.lang.CharSequence getRole() {
      return role;
    }


    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder setRole(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.role = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder clearRole() {
      role = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'joinedDate' field.
      * @return The value.
      */
    public java.time.LocalDate getJoinedDate() {
      return joinedDate;
    }


    /**
      * Sets the value of the 'joinedDate' field.
      * @param value The value of 'joinedDate'.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder setJoinedDate(java.time.LocalDate value) {
      validate(fields()[3], value);
      this.joinedDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'joinedDate' field has been set.
      * @return True if the 'joinedDate' field has been set, false otherwise.
      */
    public boolean hasJoinedDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'joinedDate' field.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder clearJoinedDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder setMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.metadata = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'metadata' field.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'subordinates' field.
      * @return The value.
      */
    public java.util.List<sqtest.avro.OrganizationalChartNode> getSubordinates() {
      return subordinates;
    }


    /**
      * Sets the value of the 'subordinates' field.
      * @param value The value of 'subordinates'.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder setSubordinates(java.util.List<sqtest.avro.OrganizationalChartNode> value) {
      validate(fields()[5], value);
      this.subordinates = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'subordinates' field has been set.
      * @return True if the 'subordinates' field has been set, false otherwise.
      */
    public boolean hasSubordinates() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'subordinates' field.
      * @return This builder.
      */
    public sqtest.avro.OrganizationalChartNode.Builder clearSubordinates() {
      subordinates = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrganizationalChartNode build() {
      try {
        OrganizationalChartNode record = new OrganizationalChartNode();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.role = fieldSetFlags()[2] ? this.role : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.joinedDate = fieldSetFlags()[3] ? this.joinedDate : (java.time.LocalDate) defaultValue(fields()[3]);
        record.metadata = fieldSetFlags()[4] ? this.metadata : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        record.subordinates = fieldSetFlags()[5] ? this.subordinates : (java.util.List<sqtest.avro.OrganizationalChartNode>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrganizationalChartNode>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrganizationalChartNode>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrganizationalChartNode>
    READER$ = (org.apache.avro.io.DatumReader<OrganizationalChartNode>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










